     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    18 00000000                                 		GLOBAL	_asm_inthandler0d
    19 00000000                                 		GLOBAL	_asm_inthandler23, _asm_inthandler24
    20 00000000                                 		GLOBAL	_memtest_sub, _asm_end_app
    21 00000000                                 		GLOBAL	_farjmp, _farcall
    22 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    23 00000000                                 		EXTERN	_inthandler20, _inthandler21
    24 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    25 00000000                                 		EXTERN	_inthandler0c
    26 00000000                                 		EXTERN	_inthandler23, _inthandler24
    27 00000000                                 		EXTERN	_hrb_api
    28 00000000                                 
    29                                          [SECTION .text]
    30 00000000                                 
    31 00000000                                 _io_hlt:	; void io_hlt(void);
    32 00000000 F4                              		HLT
    33 00000001 C3                              		RET
    34 00000002                                 
    35 00000002                                 _io_cli:	; void io_cli(void);
    36 00000002 FA                              		CLI
    37 00000003 C3                              		RET
    38 00000004                                 
    39 00000004                                 _io_sti:	; void io_sti(void);
    40 00000004 FB                              		STI
    41 00000005 C3                              		RET
    42 00000006                                 
    43 00000006                                 _io_stihlt:	; void io_stihlt(void);
    44 00000006 FB                              		STI
    45 00000007 F4                              		HLT
    46 00000008 C3                              		RET
    47 00000009                                 
    48 00000009                                 _io_in8:	; int io_in8(int port);
    49 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 0000000D B8 00000000                     		MOV		EAX,0
    51 00000012 EC                              		IN		AL,DX
    52 00000013 C3                              		RET
    53 00000014                                 
    54 00000014                                 _io_in16:	; int io_in16(int port);
    55 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000018 B8 00000000                     		MOV		EAX,0
    57 0000001D 66 ED                           		IN		AX,DX
    58 0000001F C3                              		RET
    59 00000020                                 
    60 00000020                                 _io_in32:	; int io_in32(int port);
    61 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000024 ED                              		IN		EAX,DX
    63 00000025 C3                              		RET
    64 00000026                                 
    65 00000026                                 _io_out8:	; void io_out8(int port, int data);
    66 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    67 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    68 0000002E EE                              		OUT		DX,AL
    69 0000002F C3                              		RET
    70 00000030                                 
    71 00000030                                 _io_out16:	; void io_out16(int port, int data);
    72 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    73 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    74 00000038 66 EF                           		OUT		DX,AX
    75 0000003A C3                              		RET
    76 0000003B                                 
    77 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    78 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    79 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    80 00000043 EF                              		OUT		DX,EAX
    81 00000044 C3                              		RET
    82 00000045                                 
    83 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    84 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    85 00000046 58                              		POP		EAX
    86 00000047 C3                              		RET
    87 00000048                                 
    88 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    89 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    90 0000004C 50                              		PUSH	EAX
    91 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    92 0000004E C3                              		RET
    93 0000004F                                 
    94 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    95 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    96 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    97 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    98 0000005E C3                              		RET
    99 0000005F                                 
   100 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   101 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   102 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   103 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   104 0000006E C3                              		RET
   105 0000006F                                 
   106 0000006F                                 _load_cr0:		; int load_cr0(void);
   107 0000006F 0F 20 C0                        		MOV		EAX,CR0
   108 00000072 C3                              		RET
   109 00000073                                 
   110 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   111 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   112 00000077 0F 22 C0                        		MOV		CR0,EAX
   113 0000007A C3                              		RET
   114 0000007B                                 
   115 0000007B                                 _load_tr:		; void load_tr(int tr);
   116 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   117 00000080 C3                              		RET
   118 00000081                                 
   119 00000081                                 _asm_inthandler20:
   120 00000081 06                              		PUSH	ES
   121 00000082 1E                              		PUSH	DS
   122 00000083 60                              		PUSHAD
   123 00000084 89 E0                           		MOV		EAX,ESP
   124 00000086 50                              		PUSH	EAX
   125 00000087 66 8C D0                        		MOV		AX,SS
   126 0000008A 8E D8                           		MOV		DS,AX
   127 0000008C 8E C0                           		MOV		ES,AX
   128 0000008E E8 [00000000]                   		CALL	_inthandler20
   129 00000093 58                              		POP		EAX
   130 00000094 61                              		POPAD
   131 00000095 1F                              		POP		DS
   132 00000096 07                              		POP		ES
   133 00000097 CF                              		IRETD
   134 00000098                                 
   135 00000098                                 _asm_inthandler21:
   136 00000098 06                              		PUSH	ES
   137 00000099 1E                              		PUSH	DS
   138 0000009A 60                              		PUSHAD
   139 0000009B 89 E0                           		MOV		EAX,ESP
   140 0000009D 50                              		PUSH	EAX
   141 0000009E 66 8C D0                        		MOV		AX,SS
   142 000000A1 8E D8                           		MOV		DS,AX
   143 000000A3 8E C0                           		MOV		ES,AX
   144 000000A5 E8 [00000000]                   		CALL	_inthandler21
   145 000000AA 58                              		POP		EAX
   146 000000AB 61                              		POPAD
   147 000000AC 1F                              		POP		DS
   148 000000AD 07                              		POP		ES
   149 000000AE CF                              		IRETD
   150 000000AF                                 
   151 000000AF                                 _asm_inthandler2c:
   152 000000AF 06                              		PUSH	ES
   153 000000B0 1E                              		PUSH	DS
   154 000000B1 60                              		PUSHAD
   155 000000B2 89 E0                           		MOV		EAX,ESP
   156 000000B4 50                              		PUSH	EAX
   157 000000B5 66 8C D0                        		MOV		AX,SS
   158 000000B8 8E D8                           		MOV		DS,AX
   159 000000BA 8E C0                           		MOV		ES,AX
   160 000000BC E8 [00000000]                   		CALL	_inthandler2c
   161 000000C1 58                              		POP		EAX
   162 000000C2 61                              		POPAD
   163 000000C3 1F                              		POP		DS
   164 000000C4 07                              		POP		ES
   165 000000C5 CF                              		IRETD
   166 000000C6                                 
   167 000000C6                                 _asm_inthandler23:
   168 000000C6 06                              		PUSH	ES
   169 000000C7 1E                              		PUSH	DS
   170 000000C8 60                              		PUSHAD
   171 000000C9 89 E0                           		MOV		EAX,ESP
   172 000000CB 50                              		PUSH	EAX
   173 000000CC 66 8C D0                        		MOV		AX,SS
   174 000000CF 8E D8                           		MOV		DS,AX
   175 000000D1 8E C0                           		MOV		ES,AX
   176 000000D3 E8 [00000000]                   		CALL	_inthandler23
   177 000000D8 58                              		POP		EAX
   178 000000D9 61                              		POPAD
   179 000000DA 1F                              		POP		DS
   180 000000DB 07                              		POP		ES
   181 000000DC CF                              		IRETD
   182 000000DD                                 
   183 000000DD                                 _asm_inthandler24:
   184 000000DD 06                              		PUSH	ES
   185 000000DE 1E                              		PUSH	DS
   186 000000DF 60                              		PUSHAD
   187 000000E0 89 E0                           		MOV		EAX,ESP
   188 000000E2 50                              		PUSH	EAX
   189 000000E3 66 8C D0                        		MOV		AX,SS
   190 000000E6 8E D8                           		MOV		DS,AX
   191 000000E8 8E C0                           		MOV		ES,AX
   192 000000EA E8 [00000000]                   		CALL	_inthandler24
   193 000000EF 58                              		POP		EAX
   194 000000F0 61                              		POPAD
   195 000000F1 1F                              		POP		DS
   196 000000F2 07                              		POP		ES
   197 000000F3 CF                              		IRETD
   198 000000F4                                 
   199 000000F4                                 _asm_inthandler0c:
   200 000000F4 FB                              		STI
   201 000000F5 06                              		PUSH	ES
   202 000000F6 1E                              		PUSH	DS
   203 000000F7 60                              		PUSHAD
   204 000000F8 89 E0                           		MOV		EAX,ESP
   205 000000FA 50                              		PUSH	EAX
   206 000000FB 66 8C D0                        		MOV		AX,SS
   207 000000FE 8E D8                           		MOV		DS,AX
   208 00000100 8E C0                           		MOV		ES,AX
   209 00000102 E8 [00000000]                   		CALL	_inthandler0c
   210 00000107 83 F8 00                        		CMP		EAX,0
   211 0000010A 0F 85 00000091                  		JNE		_asm_end_app
   212 00000110 58                              		POP		EAX
   213 00000111 61                              		POPAD
   214 00000112 1F                              		POP		DS
   215 00000113 07                              		POP		ES
   216 00000114 83 C4 04                        		ADD		ESP,4			; INT 0x0c でも、これが必要
   217 00000117 CF                              		IRETD
   218 00000118                                 
   219 00000118                                 _asm_inthandler0d:
   220 00000118 FB                              		STI
   221 00000119 06                              		PUSH	ES
   222 0000011A 1E                              		PUSH	DS
   223 0000011B 60                              		PUSHAD
   224 0000011C 89 E0                           		MOV		EAX,ESP
   225 0000011E 50                              		PUSH	EAX
   226 0000011F 66 8C D0                        		MOV		AX,SS
   227 00000122 8E D8                           		MOV		DS,AX
   228 00000124 8E C0                           		MOV		ES,AX
   229 00000126 E8 [00000000]                   		CALL	_inthandler0d
   230 0000012B 83 F8 00                        		CMP		EAX,0			; ここだけ違う
   231 0000012E 75 71                           		JNE		_asm_end_app	; ここだけ違う
   232 00000130 58                              		POP		EAX
   233 00000131 61                              		POPAD
   234 00000132 1F                              		POP		DS
   235 00000133 07                              		POP		ES
   236 00000134 83 C4 04                        		ADD		ESP,4			; INT 0x0d では、これが必要
   237 00000137 CF                              		IRETD
   238 00000138                                 
   239 00000138                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   240 00000138 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   241 00000139 56                              		PUSH	ESI
   242 0000013A 53                              		PUSH	EBX
   243 0000013B BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   244 00000140 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   245 00000145 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   246 00000149                                 mts_loop:
   247 00000149 89 C3                           		MOV		EBX,EAX
   248 0000014B 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   249 00000151 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   250 00000153 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   251 00000155 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   252 00000158 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   253 0000015A 75 18                           		JNE		mts_fin
   254 0000015C 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   255 0000015F 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   256 00000161 75 11                           		JNE		mts_fin
   257 00000163 89 13                           		MOV		[EBX],EDX				; *p = old;
   258 00000165 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   259 0000016A 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   260 0000016E 76 D9                           		JBE		mts_loop
   261 00000170 5B                              		POP		EBX
   262 00000171 5E                              		POP		ESI
   263 00000172 5F                              		POP		EDI
   264 00000173 C3                              		RET
   265 00000174                                 mts_fin:
   266 00000174 89 13                           		MOV		[EBX],EDX				; *p = old;
   267 00000176 5B                              		POP		EBX
   268 00000177 5E                              		POP		ESI
   269 00000178 5F                              		POP		EDI
   270 00000179 C3                              		RET
   271 0000017A                                 
   272 0000017A                                 _farjmp:		; void farjmp(int eip, int cs);
   273 0000017A FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   274 0000017E C3                              		RET
   275 0000017F                                 
   276 0000017F                                 _farcall:		; void farcall(int eip, int cs);
   277 0000017F FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   278 00000183 C3                              		RET
   279 00000184                                 
   280 00000184                                 _asm_hrb_api:
   281 00000184 FB                              		STI
   282 00000185 1E                              		PUSH	DS
   283 00000186 06                              		PUSH	ES
   284 00000187 60                              		PUSHAD		; 保存のためのPUSH
   285 00000188 60                              		PUSHAD		; hrb_apiにわたすためのPUSH
   286 00000189 66 8C D0                        		MOV		AX,SS
   287 0000018C 8E D8                           		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
   288 0000018E 8E C0                           		MOV		ES,AX
   289 00000190 E8 [00000000]                   		CALL	_hrb_api
   290 00000195 83 F8 00                        		CMP		EAX,0		; EAXが0でなければアプリ終了処理
   291 00000198 75 07                           		JNE		_asm_end_app
   292 0000019A 83 C4 20                        		ADD		ESP,32
   293 0000019D 61                              		POPAD
   294 0000019E 07                              		POP		ES
   295 0000019F 1F                              		POP		DS
   296 000001A0 CF                              		IRETD
   297 000001A1                                 _asm_end_app:
   298 000001A1                                 ;	EAXはtss.esp0の番地
   299 000001A1 8B 20                           		MOV		ESP,[EAX]
   300 000001A3 C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   301 000001AA 61                              		POPAD
   302 000001AB C3                              		RET					; cmd_appへ帰る
   303 000001AC                                 
   304 000001AC                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   305 000001AC 60                              		PUSHAD		; 32ビットレジスタを全部保存しておく
   306 000001AD 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用のEIP
   307 000001B1 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用のCS
   308 000001B5 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用のESP
   309 000001B9 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
   310 000001BD 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   311 000001C1 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   312 000001C4 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   313 000001C7 8E C3                           		MOV		ES,BX
   314 000001C9 8E DB                           		MOV		DS,BX
   315 000001CB 8E E3                           		MOV		FS,BX
   316 000001CD 8E EB                           		MOV		GS,BX
   317 000001CF                                 ;	以下はRETFでアプリに行かせるためのスタック調整
   318 000001CF 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をORする
   319 000001D2 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をORする
   320 000001D5 53                              		PUSH	EBX				; アプリのSS
   321 000001D6 52                              		PUSH	EDX				; アプリのESP
   322 000001D7 51                              		PUSH	ECX				; アプリのCS
   323 000001D8 50                              		PUSH	EAX				; アプリのEIP
   324 000001D9 CB                              		RETF
   325 000001DA                                 ;	アプリが終了してもここには来ない
   326 000001DA                                 
   327 000001DA                                 
   328 000001DA                                         GLOBAL  _asm_inthandler27
   329 000001DA                                         EXTERN  _inthandler27
   330 000001DA                                 
   331 000001DA                                 _asm_inthandler27:   ; （これは_asm_inthandler20等とほとんど同じ）
   332 000001DA 06                                      PUSH    ES
   333 000001DB 1E                                      PUSH    DS
   334 000001DC 60                                      PUSHAD
   335 000001DD 89 E0                                   MOV     EAX,ESP
   336 000001DF 50                                      PUSH    EAX
   337 000001E0 66 8C D0                                MOV     AX,SS
   338 000001E3 8E D8                                   MOV     DS,AX
   339 000001E5 8E C0                                   MOV     ES,AX
   340 000001E7 E8 [00000000]                           CALL    _inthandler27
   341 000001EC 58                                      POP     EAX
   342 000001ED 61                                      POPAD
   343 000001EE 1F                                      POP     DS
   344 000001EF 07                                      POP     ES
   345 000001F0 CF                                      IRETD
